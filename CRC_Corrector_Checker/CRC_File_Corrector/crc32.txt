{
  1. CRC32Init - инициализирует  CRC-32 значением $FFFFFFFF.
  2. Затем надо помещать порции заданной  последовательности в буфер
     и для каждой порции вызывать CRC32Next.
  3. В конце CRC32Done инвертирует все биты результата.

  CRC-32 инициализируется значением $FFFFFFFF. Потом для каждого байта
  B входной последовательности CRC-32 сдвигается вправо  на 1 байт.
  Если байты CRC-32 были [C1,C2,C3,C4] (C1 - старший, C4 - младший),
  сдвиг дает [0,C1,C2,C3]. Младший байт C4 побитно складывается с B
  по модулю 2 (C4 xor B). Новым значением CRC-32 будет его сдвинутое
  значение, сложенное побитно по модулю  2 (xor) с4-байтовой величиной
  из "магической" таблицы с использованием [B xor C4] в качестве индекса.

     Было:
       CRC-32 = [C1,C2,C3,C4] и получили очередной байт B.
     Стало:
       CRC-32 = [0,C1,C2,C3] xor Magic[B xor C4].
Delphi:
     CRC := (CRC shr 8) xor Magic[B xor byte(CRC and $FF)];
     (здесь CRC - longint, Magic - array[byte] of longint).

Последний этап вычисления CRC-32 - инвертировать все биты: CRC:= NOT CRC;
===
Например :                                                     
 var                                                           
  Buffer : array[1..8192] of Char;                             
  CRC    : Cardinal;                                           
  Count  : Cardinal;                                           
 .......
  CRC := CRC32INIT;
  repeat
   BlockRead(F, Buffer, SizeOf( Buffer ), Count);
   CRC := CalculateBufferCRC32( CRC, Buffer, Count );
  until Eof(F);
  CRC := CRC xor CRC32INIT;
 .......
===

  Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
  x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.

  Polynomials over GF(2) are represented in binary, one bit per coefficient,
  with the lowest powers in the most significant bit.  Then adding polynomials
  is just exclusive-or, and multiplying a polynomial by x is a right shift by
  one.  If we call the above polynomial p, and represent a byte as the
  polynomial q, also with the lowest power in the most significant bit (so the
  byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
  where a mod b means the remainder after dividing a by b.

  This calculation is done using the shift-register method of multiplying and
  taking the remainder.  The register is initialized to zero, and for each
  incoming bit, x^32 is added mod p to the register if the bit is a one (where
  x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
  x (which is shifting right by one and adding x^32 mod p if the bit shifted
  out is a one).  We start with the highest power (least significant bit) of
  q and repeat for all eight bits of q.

  The table is simply the CRC of all possible eight bit values.  This is all
  the information needed to generate CRC's on data a byte at a time for all
  combinations of CRC register values and incoming bytes.

procedure make_crc_table;
var
 c    : uLong;
 n,k  : int;
 poly : uLong; // polynomial exclusive-or pattern
const
 // terms of polynomial defining this crc (except x^32):
 p: array [0..13] of Byte = (0,1,2,4,5,7,8,10,11,12,16,22,23,26);
Begin
  // make exclusive-or pattern from polynomial ($EDB88320)
  poly := 0;
  for n := 0 to (sizeof(p) div sizeof(Byte))-1 do
    poly := poly or (Long(1) shl (31 - p[n]));

  for n := 0 to 255 do begin
    c := uLong(n);
    for k := 0 to 7 do begin
      if (c and 1) <> 0 then
        c := poly xor (c shr 1)
      else
        c := (c shr 1);
    end;
    crc_table[n] := c;
  end;
  crc_table_empty := FALSE;
end;
}
